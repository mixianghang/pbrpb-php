// fileencoding: utf-8
// this is the protobuf definition that the rtsr service uses for rpc services.
// anyone that wants to write an rtsr client should include this project as a dependency.
// $ protoc -I../../rts-pub/rtse-data/ -I. --cpp_out=. rtsr/proto/rtsr_service.proto

import "search_interface.proto";
import "service_strategy.proto";

option cc_generic_services = true;

package rtsr.proto;

message RequestMeta {
  // 以下所有字段均为必填项，且不能填非法参数，否则该请求直接被过滤掉

  // 每个 request 的唯一标识符，便于在日志系统中追踪
  // 某个 request 所产生的所有日志。不应该由外部修改，rtsr 会强制覆盖
  optional uint64 hash = 1;
  // 最终用户的 IP 地址，应由 web/wap/na 透传过来，用于统计用户请求
  // 如果该请求确实不涉及用户，则应把请求发起源头的 IP 地址传过来
  required string ip = 2;
  // 终端类型，仅支持 webapp,na,wap 四种类型，小写
  required string terminal = 3;
  // 业务名称，推荐"部门名_业务名" 的方式，如 bainuo_ugc.
  // 仅支持英文字母、数字、下划线三种字符
  // 内部测试可以填写如 bainuo_ugc_test
  required string business = 4;
}

message ResponseError {
  // 错误代码，暂时统一指定
  required sint32 code = 1;
  // 错误信息。 注意这个字段是 repeated 的，也就是说可能会填充多条错误信息
  // rtsr 会填充得比较随意，仅供调试查看，请勿透传给业务方。
  repeated string msg = 2;
}

message ResultShard {
  // shard 编号。用于记录结果是从哪个 shard 来的
  required uint32 index = 1;
}

extend wmise.ResultItem {
  // see service_strategy.proto in rtse-data
  // 这个字段是 rtsr 内部使用的，请勿读取、写入该数值
  optional ResultShard result_shard = 100;
}

extend wmise.SearchRequest {
  // 由于 protobuf 的限制，这个字段是 optional 的，实质上是以 required 类型对待。
  // 如果不填写，这个请求就会被 rtsr 给过滤掉。
  optional RequestMeta request_meta =1000;
}

extend wmise.SearchResponse {
  // 读取前请使用 HasExtension() 方法判断 rtsr 是否填写了这个字段
  optional ResponseError response_error = 1000;
}

service RtsrService {
  rpc Search(wmise.SearchRequest) returns (wmise.SearchResponse);
}
